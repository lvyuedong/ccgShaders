
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#include "shader.h"
#include "geoshader.h"
#include "crystalcg.h"


/*=============================================================
 ccg_get_pass_name
 ==============================================================*/
char * ccg_get_pass_name(char *result, int passIndex)
{
	switch(passIndex)
	{
		case LAYER_combined:	strcpy(result, "combined"); break;
		case LAYER_col:			strcpy(result, "col"); break;
		case LAYER_diff:		strcpy(result, "diff"); break;
		case LAYER_ambi:		strcpy(result, "ambi"); break;
		case LAYER_spec:		strcpy(result, "spec"); break;
		case LAYER_incan:		strcpy(result, "incan"); break;
		case LAYER_refl:		strcpy(result, "refl"); break;
		case LAYER_refr:		strcpy(result, "refr"); break;
		case LAYER_z:			strcpy(result, "z"); break;
		case LAYER_nor:			strcpy(result, "nor"); break;
		case LAYER_ao:			strcpy(result, "ao"); break;
		case LAYER_shad:		strcpy(result, "shad"); break;
		case LAYER_vec:			strcpy(result, "vec"); break;
		case LAYER_uv:			strcpy(result, "uv"); break;
		case LAYER_oid:			strcpy(result, "oid"); break;
		case LAYER_mid:			strcpy(result, "mid"); break;
		case LAYER_reflao:		strcpy(result, "reflao"); break;
		case LAYER_refrao:		strcpy(result, "refrao"); break;
		case LAYER_globillum:	strcpy(result, "globillum"); break;
		case LAYER_translucent:	strcpy(result, "translucent"); break;
		case LAYER_sssfront:	strcpy(result, "sssfront"); break;
		case LAYER_sssmiddle:	strcpy(result, "sssmiddle"); break;
		case LAYER_sssback:		strcpy(result, "sssback"); break;
	}

	return result;
}


/*=============================================================
 tokenize the input string into passes and framebuffer
 ==============================================================*/
void ccg_pass_string(char *passStr, struct ccg_passfbArray *passfba)
{
	char token[LAYER_NUM][30];
	char *pass;
	char *tmp;
	int i,num,passfb;

	//for(i=0;i<LAYER_NUM;i++)
	//	*(token[i]) = NULL;
	i=0;
	tmp = strtok(passStr,";");
	while (tmp != NULL)
	{
		strcpy(token[i], tmp);
		tmp = strtok (NULL, ";");
		i++;
	}
	num = i;

	for(i=0;i<=LAYER_NUM;i++)
		passfba->passfbArray[i] = 0;

	for(i=0;i<num;i++)
	{
		pass = strtok(token[i],"=");
		passfb = atoi(strtok(NULL,"="));
		while(1)
		{
  			if(!strcmp(pass,"combined")) 
			{
				passfba->passfbArray[LAYER_combined] = passfb + 1;
				/*add 1 for determining whether this pass will be written to framebuffer since fb number could be 0*/
				break;
			}
			if(!strcmp(pass,"col")) 
			{
				passfba->passfbArray[LAYER_col] = passfb+1;
				break;
			}
			if(!strcmp(pass,"diff")) 
			{
				passfba->passfbArray[LAYER_diff] = passfb+1;
				break;
			}
			if(!strcmp(pass,"ambi")) 
			{
				passfba->passfbArray[LAYER_ambi] = passfb+1;
				break;
			}
			if(!strcmp(pass,"spec")) 
			{
				passfba->passfbArray[LAYER_spec] = passfb+1;
				break;
			}
			if(!strcmp(pass,"incan")) 
			{
				passfba->passfbArray[LAYER_incan] = passfb+1;
				break;
			}
			if(!strcmp(pass,"ao")) 
			{
				passfba->passfbArray[LAYER_ao] = passfb+1;
				break;
			}
			if(!strcmp(pass,"refl")) 
			{
				passfba->passfbArray[LAYER_refl] = passfb+1;
				break;
			}
			if(!strcmp(pass,"refr")) 
			{
				passfba->passfbArray[LAYER_refr] = passfb+1;
				break;
			}
			if(!strcmp(pass,"z")) 
			{
				passfba->passfbArray[LAYER_z] = passfb+1;
				break;
			}
			if(!strcmp(pass,"shad")) 
			{
				passfba->passfbArray[LAYER_shad] = passfb+1;
				break;
			}
			if(!strcmp(pass,"nor")) 
			{
				passfba->passfbArray[LAYER_nor] = passfb+1;
				break;
			}
			if(!strcmp(pass,"vec")) 
			{
				passfba->passfbArray[LAYER_vec] = passfb+1;
				break;
			}
			if(!strcmp(pass,"uv")) 
			{
				passfba->passfbArray[LAYER_uv] = passfb+1;
				break;
			}
			if(!strcmp(pass,"oid")) 
			{
				passfba->passfbArray[LAYER_oid] = passfb+1;
				break;
			}
			if(!strcmp(pass,"mid")) 
			{
				passfba->passfbArray[LAYER_mid] = passfb+1;
				break;
			}
			if(!strcmp(pass,"reflao")) 
			{
				passfba->passfbArray[LAYER_reflao] = passfb+1;
				break;
			}
			if(!strcmp(pass,"refrao")) 
			{
				passfba->passfbArray[LAYER_refrao] = passfb+1;
				break;
			}
			if(!strcmp(pass,"globillum")) 
			{
				passfba->passfbArray[LAYER_globillum] = passfb+1;
				break;
			}
			if(!strcmp(pass,"translucent")) 
			{
				passfba->passfbArray[LAYER_translucent] = passfb+1;
				break;
			}
			if(!strcmp(pass,"sssfront")) 
			{
				passfba->passfbArray[LAYER_sssfront] = passfb+1;
				break;
			}
			if(!strcmp(pass,"sssmiddle")) 
			{
				passfba->passfbArray[LAYER_sssmiddle] = passfb+1;
				break;
			}
			if(!strcmp(pass,"sssback")) 
			{
				passfba->passfbArray[LAYER_sssback] = passfb+1;
				break;
			}
			break;
		}
	}
}

/*=============================================================
 fresnel value:
 to get transmission coefficient, use T = 1 - R
 ==============================================================*/
miScalar ccg_fresnel_reflectance(
	miState		*state,
	miScalar	ni,
	miScalar	nt)
{
	miScalar 	ai,at,p;
	miScalar	sr,pr;
	//miVector	nor,in;

	if(ni>nt){ p = ni; ni = nt; nt = p;}
	//in = state->dir;
	//nor = state->normal;
	//mi_vector_normalize(&in);
	//mi_vector_normalize(&nor);
	//p = -(mi_vector_dot(&state->dir, &state->normal));
	p = -(state->dot_nd);
	ai = acos(p>0.999999f?0.999999f:p);
	at = asin(ni/nt*sin(ai));
	sr = pow(-(sin(ai)-sin(at))/(sin(ai)+sin(at)), 2);
	pr = pow((tan(ai)-tan(at))/(tan(ai)+tan(at)), 2);
	return (sr + pr);
}


/*=============================================================
 fresnel value:
 to get transmission coefficient, use T = 1 - R
 ==============================================================*/
miScalar ccg_smoothstep(miScalar a, miScalar b, miScalar x)
{
   if (x < a)   return 0;
   if (x >= b)   return 1;

   x = (x - a)/(b - a);
   return (x*x * (3.0f - 2.0f*x));
}

/*==============================================================================================
 ccg_fresnel_LUT:
 fresnel reflectance LookUpTable: we build float array of 15x91 to be assigned by the 
 coefficient of fresnel in different cases, where the angles of incidence are arranged between 0
 to 90 degree, and the refractive index of incidence always be expected as 1, the refractive
 index of transmission should increase from 1.1 to 2.5 by every 0.1
 ===============================================================================================*/
//void ccg_fresnel_LUT(float ***f)
//{
//	int row;
//	//dynamically allocate memory for float array of 15x91
//	*f = (float **)mi_mem_allocate(15 * sizeof(float *));
//	for(row=0;row<15;row++)
//		(*f)[row] = (float *)mi_mem_allocate(91 * sizeof(float));
//	//now assign it
//	(*f)[0][0]=0.004535155638;(*f)[0][1]=0.004536403683;(*f)[0][2]=0.004540177299;(*f)[0][3]=0.004546482509;(*f)[0][4]=0.004555343206;(*f)[0][5]=0.004566793074;(*f)[0][6]=0.004580875831;(*f)[0][7]=0.004597645538;(*f)[0][8]=0.004617166987;(*f)[0][9]=0.004639516171;(*f)[0][10]=0.004664780837;(*f)[0][11]=0.004693061134;(*f)[0][12]=0.004724470356;(*f)[0][13]=0.004759135798;(*f)[0][14]=0.004797199726;(*f)[0][15]=0.004838820479;(*f)[0][16]=0.004884173714;(*f)[0][17]=0.004933453805;(*f)[0][18]=0.004986875426;(*f)[0][19]=0.005044675318;(*f)[0][20]=0.005107114282;(*f)[0][21]=0.005174479419;(*f)[0][22]=0.005247086633;(*f)[0][23]=0.005325283457;(*f)[0][24]=0.005409452213;(*f)[0][25]=0.005500013576;(*f)[0][26]=0.005597430578;(*f)[0][27]=0.005702213112;(*f)[0][28]=0.005814923016;(*f)[0][29]=0.005936179805;(*f)[0][30]=0.006066667139;(*f)[0][31]=0.006207140144;(*f)[0][32]=0.006358433703;(*f)[0][33]=0.006521471843;(*f)[0][34]=0.006697278408;(*f)[0][35]=0.006886989176;(*f)[0][36]=0.007091865672;(*f)[0][37]=0.007313310904;(*f)[0][38]=0.007552887342;(*f)[0][39]=0.007812337479;(*f)[0][40]=0.008093607387;(*f)[0][41]=0.008398873747;(*f)[0][42]=0.008730574922;(*f)[0][43]=0.009091446722;(*f)[0][44]=0.009484563659;(*f)[0][45]=0.009913386604;(*f)[0][46]=0.01038181794;(*f)[0][47]=0.01089426548;(*f)[0][48]=0.01145571672;(*f)[0][49]=0.0120718252;(*f)[0][50]=0.01274901115;(*f)[0][51]=0.01349457894;(*f)[0][52]=0.01431685446;(*f)[0][53]=0.01522534606;(*f)[0][54]=0.0162309333;(*f)[0][55]=0.01734608884;(*f)[0][56]=0.0185851396;(*f)[0][57]=0.01996457471;(*f)[0][58]=0.021503409;(*f)[0][59]=0.02322361288;(*f)[0][60]=0.02515062123;(*f)[0][61]=0.02731393667;(*f)[0][62]=0.02974784538;(*f)[0][63]=0.03249226736;(*f)[0][64]=0.03559376715;(*f)[0][65]=0.03910675599;(*f)[0][66]=0.04309492212;(*f)[0][67]=0.04763293296;(*f)[0][68]=0.05280846014;(*f)[0][69]=0.05872458791;(*f)[0][70]=0.06550267476;(*f)[0][71]=0.07328574948;(*f)[0][72]=0.08224253484;(*f)[0][73]=0.09257220434;(*f)[0][74]=0.1045099905;(*f)[0][75]=0.1183337753;(*f)[0][76]=0.1343718039;(*f)[0][77]=0.1530116713;(*f)[0][78]=0.1747107348;(*f)[0][79]=0.2000081024;(*f)[0][80]=0.2295383375;(*f)[0][81]=0.2640469971;(*f)[0][82]=0.3044080872;(*f)[0][83]=0.3516434711;(*f)[0][84]=0.4069442006;(*f)[0][85]=0.4716936613;(*f)[0][86]=0.5474923314;(*f)[0][87]=0.636183849;(*f)[0][88]=0.7398819767;(*f)[0][89]=0.8609979465;(*f)[0][90]=1.002267574;(*f)[1][0]=0.01652895317;(*f)[1][1]=0.01653312263;(*f)[1][2]=0.01654572785;(*f)[1][3]=0.01656678391;(*f)[1][4]=0.01659636213;(*f)[1][5]=0.01663456301;(*f)[1][6]=0.0166815168;(*f)[1][7]=0.01673738432;(*f)[1][8]=0.01680235797;(*f)[1][9]=0.01687666293;(*f)[1][10]=0.01696055857;(*f)[1][11]=0.01705434011;(*f)[1][12]=0.01715834051;(*f)[1][13]=0.01727293259;(*f)[1][14]=0.01739853152;(*f)[1][15]=0.01753559754;(*f)[1][16]=0.01768463899;(*f)[1][17]=0.01784621583;(*f)[1][18]=0.01802094342;(*f)[1][19]=0.01820949682;(*f)[1][20]=0.01841261554;(*f)[1][21]=0.01863110884;(*f)[1][22]=0.01886586162;(*f)[1][23]=0.01911784094;(*f)[1][24]=0.01938810326;(*f)[1][25]=0.01967780256;(*f)[1][26]=0.01998819924;(*f)[1][27]=0.02032067012;(*f)[1][28]=0.02067671946;(*f)[1][29]=0.02105799135;(*f)[1][30]=0.02146628335;(*f)[1][31]=0.02190356176;(*f)[1][32]=0.02237197868;(*f)[1][33]=0.02287389092;(*f)[1][34]=0.02341188121;(*f)[1][35]=0.02398878179;(*f)[1][36]=0.02460770088;(*f)[1][37]=0.02527205217;(*f)[1][38]=0.02598558792;(*f)[1][39]=0.02675243597;(*f)[1][40]=0.02757714128;(*f)[1][41]=0.02846471247;(*f)[1][42]=0.02942067412;(*f)[1][43]=0.0304511255;(*f)[1][44]=0.03156280659;(*f)[1][45]=0.03276317236;(*f)[1][46]=0.03406047639;(*f)[1][47]=0.03546386506;(*f)[1][48]=0.03698348367;(*f)[1][49]=0.03863059618;(*f)[1][50]=0.04041772022;(*f)[1][51]=0.04235877949;(*f)[1][52]=0.04446927589;(*f)[1][53]=0.04676648379;(*f)[1][54]=0.04926966963;(*f)[1][55]=0.05200033989;(*f)[1][56]=0.05498252129;(*f)[1][57]=0.05824307734;(*f)[1][58]=0.06181206588;(*f)[1][59]=0.06572314275;(*f)[1][60]=0.07001401741;(*f)[1][61]=0.07472696688;(*f)[1][62]=0.07990941493;(*f)[1][63]=0.0856145844;(*f)[1][64]=0.09190223081;(*f)[1][65]=0.09883946651;(*f)[1][66]=1065016851;(*f)[1][67]=0.1149735961;(*f)[1][68]=0.1243503819;(*f)[1][69]=0.1347389861;(*f)[1][70]=0.1462595474;(*f)[1][71]=0.1590469884;(*f)[1][72]=0.1732527716;(*f)[1][73]=0.1890468329;(*f)[1][74]=0.2066197021;(*f)[1][75]=0.2261848172;(*f)[1][76]=0.2479810402;(*f)[1][77]=0.2722753743;(*f)[1][78]=0.2993658838;(*f)[1][79]=0.3295848096;(*f)[1][80]=0.3633018707;(*f)[1][81]=0.4009277349;(*f)[1][82]=0.4429176352;(*f)[1][83]=0.4897751018;(*f)[1][84]=0.5420557725;(*f)[1][85]=0.6003712345;(*f)[1][86]=0.665392845;(*f)[1][87]=0.7378554702;(*f)[1][88]=0.8185610742;(*f)[1][89]=0.9083820856;(*f)[1][90]=1.008264463;(*f)[2][0]=0.03402651738;(*f)[2][1]=0.03403444017;(*f)[2][2]=0.03405838993;(*f)[2][3]=0.0340983874;(*f)[2][4]=0.03415455486;(*f)[2][5]=0.03422706441;(*f)[2][6]=0.03431613893;(*f)[2][7]=0.03442205327;(*f)[2][8]=0.03454513575;(*f)[2][9]=0.03468576995;(*f)[2][10]=0.03484439687;(*f)[2][11]=0.0350215173;(*f)[2][12]=0.03521769467;(*f)[2][13]=0.0354335582;(*f)[2][14]=0.03566980647;(*f)[2][15]=0.03592721138;(*f)[2][16]=0.03620662267;(*f)[2][17]=0.0365089728;(*f)[2][18]=0.03683528249;(*f)[2][19]=0.03718666675;(*f)[2][20]=0.03756434166;(*f)[2][21]=0.03796963167;(*f)[2][22]=0.03840397785;(*f)[2][23]=0.03886894685;(*f)[2][24]=0.03936624078;(*f)[2][25]=0.03989770811;(*f)[2][26]=0.04046535569;(*f)[2][27]=0.04107136187;(*f)[2][28]=0.04171809107;(*f)[2][29]=0.04240810971;(*f)[2][30]=0.04314420378;(*f)[2][31]=0.04392939817;(*f)[2][32]=0.04476697797;(*f)[2][33]=0.0456605119;(*f)[2][34]=0.04661387807;(*f)[2][35]=0.04763129251;(*f)[2][36]=0.0487173404;(*f)[2][37]=0.04987701069;(*f)[2][38]=0.05111573415;(*f)[2][39]=0.05243942534;(*f)[2][40]=0.053854529;(*f)[2][41]=0.05536807113;(*f)[2][42]=0.05698771544;(*f)[2][43]=0.05872182559;(*f)[2][44]=0.06057953398;(*f)[2][45]=0.06257081759;(*f)[2][46]=0.06470658189;(*f)[2][47]=0.06699875324;(*f)[2][48]=0.06946038118;(*f)[2][49]=0.0721057511;(*f)[2][50]=0.0749505088;(*f)[2][51]=0.0780117978;(*f)[2][52]=0.08130841092;(*f)[2][53]=0.08486095734;(*f)[2][54]=0.08869204678;(*f)[2][55]=0.09282649235;(*f)[2][56]=0.0972915339;(*f)[2][57]=0.1021170836;(*f)[2][58]=0.1073359959;(*f)[2][59]=0.1129843638;(*f)[2][60]=0.1191018439;(*f)[2][61]=0.1257320118;(*f)[2][62]=0.1329227517;(*f)[2][63]=0.1407266806;(*f)[2][64]=0.1492016116;(*f)[2][65]=0.1584110568;(*f)[2][66]=0.1684247735;(*f)[2][67]=0.1793193558;(*f)[2][68]=0.1911788724;(*f)[2][69]=0.2040955544;(*f)[2][70]=0.2181705318;(*f)[2][71]=0.2335146228;(*f)[2][72]=0.2502491735;(*f)[2][73]=0.2685069489;(*f)[2][74]=0.2884330743;(*f)[2][75]=0.3101860243;(*f)[2][76]=0.3339386563;(*f)[2][77]=0.3598792846;(*f)[2][78]=0.3882127886;(*f)[2][79]=0.4191617484;(*f)[2][80]=0.452967599;(*f)[2][81]=0.4898917916;(*f)[2][82]=0.5302169518;(*f)[2][83]=0.5742480191;(*f)[2][84]=0.6223133534;(*f)[2][85]=0.6747657904;(*f)[2][86]=0.7319836286;(*f)[2][87]=0.7943715279;(*f)[2][88]=0.8623612977;(*f)[2][89]=0.9364125558;(*f)[2][90]=1.017013233;(*f)[3][0]=0.05555563492;(*f)[3][1]=0.05556764634;(*f)[3][2]=0.05560395224;(*f)[3][3]=0.05566457405;(*f)[3][4]=0.05574968027;(*f)[3][5]=0.05585950795;(*f)[3][6]=0.05599436381;(*f)[3][7]=0.05615462571;(*f)[3][8]=0.05634074447;(*f)[3][9]=0.05655324607;(*f)[3][10]=0.05679273418;(*f)[3][11]=0.05705989313;(*f)[3][12]=0.05735549125;(*f)[3][13]=0.05768038468;(*f)[3][14]=0.05803552163;(*f)[3][15]=0.05842194708;(*f)[3][16]=0.05884080811;(*f)[3][17]=0.05929335969;(*f)[3][18]=0.05978097108;(*f)[3][19]=0.06030513295;(*f)[3][20]=0.06086746511;(*f)[3][21]=0.06146972503;(*f)[3][22]=0.06211381714;(*f)[3][23]=0.06280180306;(*f)[3][24]=0.06353591271;(*f)[3][25]=0.06431855649;(*f)[3][26]=0.06515233858;(*f)[3][27]=0.0660400714;(*f)[3][28]=0.0669847915;(*f)[3][29]=0.06798977671;(*f)[3][30]=0.06905856504;(*f)[3][31]=0.07019497514;(*f)[3][32]=0.07140312868;(*f)[3][33]=0.0726874747;(*f)[3][34]=0.07405281617;(*f)[3][35]=0.07550433898;(*f)[3][36]=0.07704764345;(*f)[3][37]=0.07868877874;(*f)[3][38]=0.08043428032;(*f)[3][39]=0.08229121079;(*f)[3][40]=0.08426720438;(*f)[3][41]=0.08637051539;(*f)[3][42]=0.08861007103;(*f)[3][43]=0.09099552883;(*f)[3][44]=0.09353733926;(*f)[3][45]=0.0962468388;(*f)[3][46]=0.09913619939;(*f)[3][47]=0.1022187583;(*f)[3][48]=0.1055088566;(*f)[3][49]=0.1090220589;(*f)[3][50]=0.112775232;(*f)[3][51]=0.116786657;(*f)[3][52]=0.1210761513;(*f)[3][53]=0.1256652;(*f)[3][54]=0.1305770996;(*f)[3][55]=0.1358371118;(*f)[3][56]=0.1414726308;(*f)[3][57]=0.1475133631;(*f)[3][58]=0.1539915223;(*f)[3][59]=0.1609420375;(*f)[3][60]=0.1684027778;(*f)[3][61]=0.1764147935;(*f)[3][62]=0.1850225737;(*f)[3][63]=0.1942743214;(*f)[3][64]=0.2042222476;(*f)[3][65]=0.214922883;(*f)[3][66]=0.2264374095;(*f)[3][67]=0.2388320099;(*f)[3][68]=0.2521782374;(*f)[3][69]=0.2665534031;(*f)[3][70]=0.2820409822;(*f)[3][71]=0.298731037;(*f)[3][72]=0.3167206562;(*f)[3][73]=0.3361144083;(*f)[3][74]=0.3570248084;(*f)[3][75]=0.3795727936;(*f)[3][76]=0.4038882065;(*f)[3][77]=0.4301102814;(*f)[3][78]=0.4583881304;(*f)[3][79]=0.4888812242;(*f)[3][80]=0.5217598628;(*f)[3][81]=0.5572056293;(*f)[3][82]=0.5954118225;(*f)[3][83]=0.6365838593;(*f)[3][84]=0.6809396415;(*f)[3][85]=0.7287098778;(*f)[3][86]=0.7801383535;(*f)[3][87]=0.8354821407;(*f)[3][88]=0.8950117377;(*f)[3][89]=0.9590111323;(*f)[3][90]=1.027777778;(*f)[4][0]=0.08000010667;(*f)[4][1]=0.0800162497;(*f)[4][2]=0.08006504007;(*f)[4][3]=0.08014649509;(*f)[4][4]=0.080260822;(*f)[4][5]=0.08040831216;(*f)[4][6]=0.08058934231;(*f)[4][7]=0.08080437616;(*f)[4][8]=0.08105396644;(*f)[4][9]=0.0813387572;(*f)[4][10]=0.08165948667;(*f)[4][11]=0.0820169904;(*f)[4][12]=0.08241220494;(*f)[4][13]=0.08284617192;(*f)[4][14]=0.08332004262;(*f)[4][15]=0.08383508308;(*f)[4][16]=0.08439267971;(*f)[4][17]=0.08499434548;(*f)[4][18]=0.08564172674;(*f)[4][19]=0.08633661066;(*f)[4][20]=0.08708093336;(*f)[4][21]=0.08787678882;(*f)[4][22]=0.0887264385;(*f)[4][23]=0.0896323219;(*f)[4][24]=0.09059706796;(*f)[4][25]=0.09162350746;(*f)[4][26]=0.09271468647;(*f)[4][27]=0.09387388095;(*f)[4][28]=0.09510461248;(*f)[4][29]=0.09641066543;(*f)[4][30]=0.0977961054;(*f)[4][31]=0.09926529927;(*f)[4][32]=0.1008229368;(*f)[4][33]=0.1024740541;(*f)[4][34]=0.1042240589;(*f)[4][35]=0.1060787578;(*f)[4][36]=0.1080443857;(*f)[4][37]=0.1101276379;(*f)[4][38]=0.1123357045;(*f)[4][39]=0.114676307;(*f)[4][40]=0.1171577391;(*f)[4][41]=0.1197889089;(*f)[4][42]=0.1225793864;(*f)[4][43]=0.1255394529;(*f)[4][44]=0.128680155;(*f)[4][45]=0.132013363;(*f)[4][46]=0.135551833;(*f)[4][47]=0.139309274;(*f)[4][48]=0.14330042;(*f)[4][49]=0.1475411072;(*f)[4][50]=0.1520483573;(*f)[4][51]=0.1568404655;(*f)[4][52]=0.1619370964;(*f)[4][53]=0.1673593849;(*f)[4][54]=0.1731300451;(*f)[4][55]=0.1792734853;(*f)[4][56]=0.1858159321;(*f)[4][57]=0.1927855603;(*f)[4][58]=0.2002126325;(*f)[4][59]=0.2081296458;(*f)[4][60]=0.2165714881;(*f)[4][61]=0.2255756017;(*f)[4][62]=0.2351821566;(*f)[4][63]=0.2454342322;(*f)[4][64]=0.2563780075;(*f)[4][65]=0.2680629598;(*f)[4][66]=0.2805420716;(*f)[4][67]=0.2938720456;(*f)[4][68]=0.3081135267;(*f)[4][69]=0.3233313306;(*f)[4][70]=0.3395946779;(*f)[4][71]=0.356977434;(*f)[4][72]=0.3755583506;(*f)[4][73]=0.3954213115;(*f)[4][74]=0.4166555769;(*f)[4][75]=0.439356027;(*f)[4][76]=0.4636234024;(*f)[4][77]=0.4895645374;(*f)[4][78]=0.5172925861;(*f)[4][79]=0.5469272357;(*f)[4][80]=0.5785949057;(*f)[4][81]=0.6124289303;(*f)[4][82]=0.6485697175;(*f)[4][83]=0.6871648846;(*f)[4][84]=0.7283693645;(*f)[4][85]=0.7723454787;(*f)[4][86]=0.8192629736;(*f)[4][87]=0.8692990158;(*f)[4][88]=0.9226381423;(*f)[4][89]=0.9794721613;(*f)[4][90]=1.04;(*f)[5][0]=0.1065090089;(*f)[5][1]=0.1065291575;(*f)[5][2]=0.1065900501;(*f)[5][3]=0.1066916961;(*f)[5][4]=0.1068343334;(*f)[5][5]=0.1070182965;(*f)[5][6]=0.1072440176;(*f)[5][7]=0.1075120285;(*f)[5][8]=0.1078229623;(*f)[5][9]=0.1081775559;(*f)[5][10]=0.1085766532;(*f)[5][11]=0.109021208;(*f)[5][12]=0.1095122879;(*f)[5][13]=0.1100510783;(*f)[5][14]=0.1106388873;(*f)[5][15]=0.1112771506;(*f)[5][16]=0.1119674371;(*f)[5][17]=0.1127114556;(*f)[5][18]=0.1135110611;(*f)[5][19]=0.1143682623;(*f)[5][20]=0.1152852299;(*f)[5][21]=0.1162643053;(*f)[5][22]=0.1173080098;(*f)[5][23]=0.1184190554;(*f)[5][24]=0.1196003554;(*f)[5][25]=0.1208550367;(*f)[5][26]=0.1221864528;(*f)[5][27]=0.1235981974;(*f)[5][28]=0.1250941197;(*f)[5][29]=0.1266783406;(*f)[5][30]=0.1283552699;(*f)[5][31]=0.1301296249;(*f)[5][32]=0.1320064508;(*f)[5][33]=0.133991142;(*f)[5][34]=0.136089465;(*f)[5][35]=0.1383075836;(*f)[5][36]=0.1406520852;(*f)[5][37]=0.1431300092;(*f)[5][38]=0.1457488776;(*f)[5][39]=0.1485167274;(*f)[5][40]=0.1514421459;(*f)[5][41]=0.1545343072;(*f)[5][42]=0.1578030127;(*f)[5][43]=0.1612587332;(*f)[5][44]=0.1649126543;(*f)[5][45]=0.1687767247;(*f)[5][46]=0.1728637078;(*f)[5][47]=0.1771872361;(*f)[5][48]=0.1817618695;(*f)[5][49]=0.1866031572;(*f)[5][50]=0.1917277032;(*f)[5][51]=0.1971532358;(*f)[5][52]=0.2028986808;(*f)[5][53]=0.2089842395;(*f)[5][54]=0.2154314706;(*f)[5][55]=0.2222633763;(*f)[5][56]=0.2295044933;(*f)[5][57]=0.2371809883;(*f)[5][58]=0.2453207577;(*f)[5][59]=0.2539535319;(*f)[5][60]=0.2631109848;(*f)[5][61]=0.2728268466;(*f)[5][62]=0.2831370221;(*f)[5][63]=0.2940797119;(*f)[5][64]=0.3056955387;(*f)[5][65]=0.3180276757;(*f)[5][66]=0.3311219797;(*f)[5][67]=0.3450271255;(*f)[5][68]=0.359794743;(*f)[5][69]=0.3754795557;(*f)[5][70]=0.3921395198;(*f)[5][71]=0.4098359626;(*f)[5][72]=0.4286337203;(*f)[5][73]=0.448601273;(*f)[5][74]=0.4698108764;(*f)[5][75]=0.4923386882;(*f)[5][76]=0.5162648883;(*f)[5][77]=0.5416737909;(*f)[5][78]=0.5686539473;(*f)[5][79]=0.5972982359;(*f)[5][80]=0.6277039405;(*f)[5][81]=0.6599728116;(*f)[5][82]=0.6942111111;(*f)[5][83]=0.7305296363;(*f)[5][84]=0.7690437232;(*f)[5][85]=0.8098732245;(*f)[5][86]=0.8531424615;(*f)[5][87]=0.898980148;(*f)[5][88]=0.9475192826;(*f)[5][89]=0.9988970084;(*f)[5][90]=1.053254438;(*f)[6][0]=0.1344308852;(*f)[6][1]=0.1344548196;(*f)[6][2]=0.1345271493;(*f)[6][3]=0.1346478727;(*f)[6][4]=0.1348172512;(*f)[6][5]=0.1350356521;(*f)[6][6]=0.1353035497;(*f)[6][7]=0.1356215271;(*f)[6][8]=0.1359902782;(*f)[6][9]=0.13641061;(*f)[6][10]=0.1368834457;(*f)[6][11]=0.1374098272;(*f)[6][12]=0.1379909199;(*f)[6][13]=0.1386280155;(*f)[6][14]=0.1393225376;(*f)[6][15]=0.140076046;(*f)[6][16]=0.1408902424;(*f)[6][17]=0.1417669768;(*f)[6][18]=0.1427082535;(*f)[6][19]=0.1437162384;(*f)[6][20]=0.144793267;(*f)[6][21]=0.1459418525;(*f)[6][22]=0.1471646948;(*f)[6][23]=0.1484646906;(*f)[6][24]=0.1498449433;(*f)[6][25]=0.1513087747;(*f)[6][26]=0.152859737;(*f)[6][27]=0.1545016255;(*f)[6][28]=0.1562384929;(*f)[6][29]=0.1580746636;(*f)[6][30]=0.1600147502;(*f)[6][31]=0.1620636699;(*f)[6][32]=0.1642266629;(*f)[6][33]=0.166509312;(*f)[6][34]=0.1689175623;(*f)[6][35]=0.1714577444;(*f)[6][36]=0.1741365967;(*f)[6][37]=0.1769612908;(*f)[6][38]=0.179939458;(*f)[6][39]=0.1830792172;(*f)[6][40]=0.1863892047;(*f)[6][41]=0.189878606;(*f)[6][42]=0.1935571895;(*f)[6][43]=0.1974353417;(*f)[6][44]=0.2015241049;(*f)[6][45]=0.2058352171;(*f)[6][46]=0.2103811538;(*f)[6][47]=0.2151751724;(*f)[6][48]=0.2202313587;(*f)[6][49]=0.2255646762;(*f)[6][50]=0.2311910176;(*f)[6][51]=0.2371272588;(*f)[6][52]=0.2433913158;(*f)[6][53]=0.2500022041;(*f)[6][54]=0.2569801005;(*f)[6][55]=0.2643464079;(*f)[6][56]=0.2721238225;(*f)[6][57]=0.2803364036;(*f)[6][58]=0.2890096457;(*f)[6][59]=0.2981705534;(*f)[6][60]=0.3078477185;(*f)[6][61]=0.3180713985;(*f)[6][62]=0.328873598;(*f)[6][63]=0.3402881512;(*f)[6][64]=0.3523508057;(*f)[6][65]=0.3650993074;(*f)[6][66]=0.3785734865;(*f)[6][67]=0.3928153427;(*f)[6][68]=0.407869131;(*f)[6][69]=0.4237814459;(*f)[6][70]=0.4406013046;(*f)[6][71]=0.4583802279;(*f)[6][72]=0.4771723174;(*f)[6][73]=0.4970343299;(*f)[6][74]=0.5180257465;(*f)[6][75]=0.5402088357;(*f)[6][76]=0.5636487106;(*f)[6][77]=0.5884133777;(*f)[6][78]=0.6145737766;(*f)[6][79]=0.64220381;(*f)[6][80]=0.6713803623;(*f)[6][81]=0.7021833045;(*f)[6][82]=0.7346954868;(*f)[6][83]=0.7690027141;(*f)[6][84]=0.8051937061;(*f)[6][85]=0.8433600389;(*f)[6][86]=0.8835960672;(*f)[6][87]=0.9259988261;(*f)[6][88]=0.9706679112;(*f)[6][89]=1.017705336;(*f)[6][90]=1.067215364;(*f)[7][0]=0.1632654875;(*f)[7][1]=0.1632929404;(*f)[7][2]=0.1633758989;(*f)[7][3]=0.1635143483;(*f)[7][4]=0.163708567;(*f)[7][5]=0.163958946;(*f)[7][6]=0.1642659903;(*f)[7][7]=0.1646303201;(*f)[7][8]=0.165052673;(*f)[7][9]=0.1655339062;(*f)[7][10]=0.1660749994;(*f)[7][11]=0.1666770577;(*f)[7][12]=0.167341315;(*f)[7][13]=0.168069138;(*f)[7][14]=0.1688620307;(*f)[7][15]=0.1697216388;(*f)[7][16]=0.1706497552;(*f)[7][17]=0.1716483255;(*f)[7][18]=0.1727194542;(*f)[7][19]=0.1738654117;(*f)[7][20]=0.1750886412;(*f)[7][21]=0.1763917665;(*f)[7][22]=0.1777776007;(*f)[7][23]=0.1792491548;(*f)[7][24]=0.1808096479;(*f)[7][25]=0.1824625169;(*f)[7][26]=0.1842114282;(*f)[7][27]=0.186060289;(*f)[7][28]=0.1880132601;(*f)[7][29]=0.1900747692;(*f)[7][30]=0.1922495254;(*f)[7][31]=0.1945425341;(*f)[7][32]=0.1969591132;(*f)[7][33]=0.1995049101;(*f)[7][34]=0.2021859202;(*f)[7][35]=0.2050085055;(*f)[7][36]=0.2079794154;(*f)[7][37]=0.211105808;(*f)[7][38]=0.2143952728;(*f)[7][39]=0.217855855;(*f)[7][40]=0.2214960802;(*f)[7][41]=0.2253249816;(*f)[7][42]=0.2293521277;(*f)[7][43]=0.2335876522;(*f)[7][44]=0.2380422845;(*f)[7][45]=0.2427273828;(*f)[7][46]=0.2476549676;(*f)[7][47]=0.2528377579;(*f)[7][48]=0.2582892081;(*f)[7][49]=0.2640235474;(*f)[7][50]=0.2700558196;(*f)[7][51]=0.2764019262;(*f)[7][52]=0.2830786694;(*f)[7][53]=0.2901037982;(*f)[7][54]=0.297496055;(*f)[7][55]=0.305275224;(*f)[7][56]=0.3134621815;(*f)[7][57]=0.3220789469;(*f)[7][58]=0.3311487354;(*f)[7][59]=0.3406960115;(*f)[7][60]=0.3507465435;(*f)[7][61]=0.3613274592;(*f)[7][62]=0.3724673015;(*f)[7][63]=0.3841960846;(*f)[7][64]=0.3965453506;(*f)[7][65]=0.4095482249;(*f)[7][66]=0.4232394721;(*f)[7][67]=0.4376555504;(*f)[7][68]=0.4528346638;(*f)[7][69]=0.468816814;(*f)[7][70]=0.4856438486;(*f)[7][71]=0.503359507;(*f)[7][72]=0.5220094625;(*f)[7][73]=0.5416413604;(*f)[7][74]=0.5623048514;(*f)[7][75]=0.5840516193;(*f)[7][76]=0.6069354025;(*f)[7][77]=0.6310120087;(*f)[7][78]=0.6563393216;(*f)[7][79]=0.6829772993;(*f)[7][80]=0.7109879626;(*f)[7][81]=0.740435374;(*f)[7][82]=0.7713856048;(*f)[7][83]=0.8039066906;(*f)[7][84]=0.838068574;(*f)[7][85]=0.8739430332;(*f)[7][86]=0.9116035971;(*f)[7][87]=0.951125444;(*f)[7][88]=0.992585286;(*f)[7][89]=1.036061235;(*f)[7][90]=1.081632653;(*f)[8][0]=0.1926280268;(*f)[8][1]=0.1926587119;(*f)[8][2]=0.1927514333;(*f)[8][3]=0.1929061621;(*f)[8][4]=0.1931231883;(*f)[8][5]=0.1934029191;(*f)[8][6]=0.1937458803;(*f)[8][7]=0.1941527172;(*f)[8][8]=0.1946241971;(*f)[8][9]=0.1951612108;(*f)[8][10]=0.1957647759;(*f)[8][11]=0.196436039;(*f)[8][12]=0.1971762793;(*f)[8][13]=0.1979869122;(*f)[8][14]=0.1988694936;(*f)[8][15]=0.1998257238;(*f)[8][16]=0.2008574527;(*f)[8][17]=0.2019666851;(*f)[8][18]=0.2031555863;(*f)[8][19]=0.2044264885;(*f)[8][20]=0.2057818972;(*f)[8][21]=0.2072244986;(*f)[8][22]=0.2087571672;(*f)[8][23]=0.2103829741;(*f)[8][24]=0.2121051955;(*f)[8][25]=0.2139273227;(*f)[8][26]=0.2158530713;(*f)[8][27]=0.2178863925;(*f)[8][28]=0.2200314839;(*f)[8][29]=0.2222928017;(*f)[8][30]=0.2246750734;(*f)[8][31]=0.227183311;(*f)[8][32]=0.2298228251;(*f)[8][33]=0.2325992405;(*f)[8][34]=0.2355185112;(*f)[8][35]=0.2385869373;(*f)[8][36]=0.241811183;(*f)[8][37]=0.2451982943;(*f)[8][38]=0.2487557189;(*f)[8][39]=0.2524913263;(*f)[8][40]=0.256413429;(*f)[8][41]=0.2605308055;(*f)[8][42]=0.2648527225;(*f)[8][43]=0.2693889606;(*f)[8][44]=0.2741498386;(*f)[8][45]=0.2791462411;(*f)[8][46]=0.2843896453;(*f)[8][47]=0.2898921501;(*f)[8][48]=0.2956665057;(*f)[8][49]=0.3017261447;(*f)[8][50]=0.3080852136;(*f)[8][51]=0.3147586061;(*f)[8][52]=0.3217619966;(*f)[8][53]=0.3291118751;(*f)[8][54]=0.3368255829;(*f)[8][55]=0.3449213489;(*f)[8][56]=0.353418327;(*f)[8][57]=0.3623366335;(*f)[8][58]=0.3716973853;(*f)[8][59]=0.3815227387;(*f)[8][60]=0.391835928;(*f)[8][61]=0.4026613042;(*f)[8][62]=0.4140243733;(*f)[8][63]=0.4259518347;(*f)[8][64]=0.4384716188;(*f)[8][65]=0.4516129229;(*f)[8][66]=0.4654062471;(*f)[8][67]=0.4798834278;(*f)[8][68]=0.4950776696;(*f)[8][69]=0.5110235752;(*f)[8][70]=0.5277571718;(*f)[8][71]=0.5453159357;(*f)[8][72]=0.5637388124;(*f)[8][73]=0.5830662329;(*f)[8][74]=0.6033401262;(*f)[8][75]=0.6246039258;(*f)[8][76]=0.6469025712;(*f)[8][77]=0.670282504;(*f)[8][78]=0.694791656;(*f)[8][79]=0.7204794311;(*f)[8][80]=0.7473966797;(*f)[8][81]=0.7755956635;(*f)[8][82]=0.8051300131;(*f)[8][83]=0.8360546748;(*f)[8][84]=0.868425848;(*f)[8][85]=0.9023009124;(*f)[8][86]=0.9377383433;(*f)[8][87]=0.9747976166;(*f)[8][88]=1.013539101;(*f)[8][89]=1.054023939;(*f)[8][90]=1.096313912;(*f)[9][0]=0.2222224444;(*f)[9][1]=0.2222560735;(*f)[9][2]=0.2223576868;(*f)[9][3]=0.2225272401;(*f)[9][4]=0.2227650308;(*f)[9][5]=0.2230714761;(*f)[9][6]=0.2234471144;(*f)[9][7]=0.2238926067;(*f)[9][8]=0.224408738;(*f)[9][9]=0.2249964195;(*f)[9][10]=0.2256566911;(*f)[9][11]=0.2263907239;(*f)[9][12]=0.2271998232;(*f)[9][13]=0.2280854322;(*f)[9][14]=0.2290491353;(*f)[9][15]=0.2300926624;(*f)[9][16]=0.2312178935;(*f)[9][17]=0.2324268634;(*f)[9][18]=0.2337217668;(*f)[9][19]=0.2351049643;(*f)[9][20]=0.2365789884;(*f)[9][21]=0.2381465498;(*f)[9][22]=0.2398105447;(*f)[9][23]=0.2415740618;(*f)[9][24]=0.2434403907;(*f)[9][25]=0.2454130301;(*f)[9][26]=0.2474956967;(*f)[9][27]=0.2496923346;(*f)[9][28]=0.2520071255;(*f)[9][29]=0.2544444992;(*f)[9][30]=0.2570091449;(*f)[9][31]=0.2597060224;(*f)[9][32]=0.2625403753;(*f)[9][33]=0.2655177434;(*f)[9][34]=0.2686439767;(*f)[9][35]=0.2719252496;(*f)[9][36]=0.2753680759;(*f)[9][37]=0.2789793248;(*f)[9][38]=0.2827662368;(*f)[9][39]=0.2867364414;(*f)[9][40]=0.290897975;(*f)[9][41]=0.2952592989;(*f)[9][42]=0.2998293196;(*f)[9][43]=0.3046174081;(*f)[9][44]=0.3096334213;(*f)[9][45]=0.3148877235;(*f)[9][46]=0.3203912086;(*f)[9][47]=0.3261553232;(*f)[9][48]=0.3321920906;(*f)[9][49]=0.3385141348;(*f)[9][50]=0.3451347057;(*f)[9][51]=0.3520677047;(*f)[9][52]=0.359327711;(*f)[9][53]=0.3669300079;(*f)[9][54]=0.3748906099;(*f)[9][55]=0.3832262903;(*f)[9][56]=0.3919546083;(*f)[9][57]=0.4010939369;(*f)[9][58]=0.4106634906;(*f)[9][59]=0.4206833531;(*f)[9][60]=0.431174504;(*f)[9][61]=0.4421588463;(*f)[9][62]=0.4536592324;(*f)[9][63]=0.4656994892;(*f)[9][64]=0.478304443;(*f)[9][65]=0.4914999426;(*f)[9][66]=0.5053128806;(*f)[9][67]=0.5197712139;(*f)[9][68]=0.5349039815;(*f)[9][69]=0.5507413196;(*f)[9][70]=0.5673144756;(*f)[9][71]=0.5846558174;(*f)[9][72]=0.6027988403;(*f)[9][73]=0.6217781706;(*f)[9][74]=0.6416295642;(*f)[9][75]=0.6623899014;(*f)[9][76]=0.6840971773;(*f)[9][77]=0.706790486;(*f)[9][78]=0.7305100003;(*f)[9][79]=0.7552969446;(*f)[9][80]=0.7811935622;(*f)[9][81]=0.808243075;(*f)[9][82]=0.8364896366;(*f)[9][83]=0.8659782781;(*f)[9][84]=0.8967548451;(*f)[9][85]=0.9288659279;(*f)[9][86]=0.9623587816;(*f)[9][87]=0.9972812386;(*f)[9][88]=1.033681612;(*f)[9][89]=1.071608587;(*f)[9][90]=1.111111111;(*f)[10][0]=0.2518212596;(*f)[10][1]=0.2518575529;(*f)[10][2]=0.2519672123;(*f)[10][3]=0.2521501784;(*f)[10][4]=0.252406752;(*f)[10][5]=0.2527373555;(*f)[10][6]=0.2531425336;(*f)[10][7]=0.2536229546;(*f)[10][8]=0.2541794122;(*f)[10][9]=0.2548128271;(*f)[10][10]=0.2555242492;(*f)[10][11]=0.2563148603;(*f)[10][12]=0.2571859765;(*f)[10][13]=0.258139052;(*f)[10][14]=0.2591756814;(*f)[10][15]=0.2602976045;(*f)[10][16]=0.26150671;(*f)[10][17]=0.2628050396;(*f)[10][18]=0.2641947933;(*f)[10][19]=0.2656783342;(*f)[10][20]=0.267258194;(*f)[10][21]=0.2689370791;(*f)[10][22]=0.2707178768;(*f)[10][23]=0.2726036618;(*f)[10][24]=0.2745977033;(*f)[10][25]=0.2767034729;(*f)[10][26]=0.2789246521;(*f)[10][27]=0.2812651406;(*f)[10][28]=0.2837290658;(*f)[10][29]=0.2863207913;(*f)[10][30]=0.2890449271;(*f)[10][31]=0.29190634;(*f)[10][32]=0.2949101641;(*f)[10][33]=0.2980618119;(*f)[10][34]=0.3013669867;(*f)[10][35]=0.3048316942;(*f)[10][36]=0.308462256;(*f)[10][37]=0.3122653223;(*f)[10][38]=0.3162478864;(*f)[10][39]=0.3204172989;(*f)[10][40]=0.3247812824;(*f)[10][41]=0.3293479476;(*f)[10][42]=0.3341258089;(*f)[10][43]=0.3391238012;(*f)[10][44]=0.3443512967;(*f)[10][45]=0.3498181229;(*f)[10][46]=0.3555345801;(*f)[10][47]=0.3615114603;(*f)[10][48]=0.3677600659;(*f)[10][49]=0.374292229;(*f)[10][50]=0.381120331;(*f)[10][51]=0.3882573225;(*f)[10][52]=0.3957167432;(*f)[10][53]=0.4035127428;(*f)[10][54]=0.4116601006;(*f)[10][55]=0.4201742462;(*f)[10][56]=0.4290712803;(*f)[10][57]=0.4383679938;(*f)[10][58]=0.4480818888;(*f)[10][59]=0.4582311972;(*f)[10][60]=0.4688349;(*f)[10][61]=0.4799127455;(*f)[10][62]=0.4914852668;(*f)[10][63]=0.503573798;(*f)[10][64]=0.5162004895;(*f)[10][65]=0.5293883224;(*f)[10][66]=0.5431611199;(*f)[10][67]=0.5575435588;(*f)[10][68]=0.5725611775;(*f)[10][69]=0.5882403825;(*f)[10][70]=0.6046084523;(*f)[10][71]=0.6216935387;(*f)[10][72]=0.6395246645;(*f)[10][73]=0.6581317189;(*f)[10][74]=0.6775454483;(*f)[10][75]=0.6977974443;(*f)[10][76]=0.7189201268;(*f)[10][77]=0.7409467231;(*f)[10][78]=0.763911242;(*f)[10][79]=0.7878484435;(*f)[10][80]=0.8127938025;(*f)[10][81]=0.8387834674;(*f)[10][82]=0.8658542129;(*f)[10][83]=0.8940433867;(*f)[10][84]=0.9233888498;(*f)[10][85]=0.9539289104;(*f)[10][86]=0.9857022509;(*f)[10][87]=1.018747849;(*f)[10][88]=1.053104889;(*f)[10][89]=1.088812672;(*f)[10][90]=1.12591051;(*f)[11][0]=0.2812502557;(*f)[11][1]=0.2812889476;(*f)[11][2]=0.2814058506;(*f)[11][3]=0.2816008897;(*f)[11][4]=0.2818743667;(*f)[11][5]=0.282226705;(*f)[11][6]=0.2826584504;(*f)[11][7]=0.2831702724;(*f)[11][8]=0.2837629658;(*f)[11][9]=0.284437452;(*f)[11][10]=0.2851947814;(*f)[11][11]=0.2860361355;(*f)[11][12]=0.2869628294;(*f)[11][13]=0.2879763144;(*f)[11][14]=0.2890781817;(*f)[11][15]=0.2902701653;(*f)[11][16]=0.2915541456;(*f)[11][17]=0.292932154;(*f)[11][18]=0.2944063766;(*f)[11][19]=0.295979159;(*f)[11][20]=0.2976530115;(*f)[11][21]=0.2994306141;(*f)[11][22]=0.301314822;(*f)[11][23]=0.303308672;(*f)[11][24]=0.3054153883;(*f)[11][25]=0.3076383894;(*f)[11][26]=0.3099812952;(*f)[11][27]=0.3124479341;(*f)[11][28]=0.3150423512;(*f)[11][29]=0.317768816;(*f)[11][30]=0.320631831;(*f)[11][31]=0.3236361409;(*f)[11][32]=0.3267867417;(*f)[11][33]=0.3300888905;(*f)[11][34]=0.3335481155;(*f)[11][35]=0.3371702267;(*f)[11][36]=0.3409613266;(*f)[11][37]=0.3449278219;(*f)[11][38]=0.3490764347;(*f)[11][39]=0.3534142151;(*f)[11][40]=0.3579485535;(*f)[11][41]=0.3626871934;(*f)[11][42]=0.3676382448;(*f)[11][43]=0.3728101977;(*f)[11][44]=0.3782119362;(*f)[11][45]=0.3838527524;(*f)[11][46]=0.3897423612;(*f)[11][47]=0.395890915;(*f)[11][48]=0.4023090184;(*f)[11][49]=0.4090077439;(*f)[11][50]=0.4159986468;(*f)[11][51]=0.4232937804;(*f)[11][52]=0.430905712;(*f)[11][53]=0.4388475377;(*f)[11][54]=0.447132898;(*f)[11][55]=0.4557759924;(*f)[11][56]=0.4647915948;(*f)[11][57]=0.4741950678;(*f)[11][58]=0.4840023761;(*f)[11][59]=0.4942301009;(*f)[11][60]=0.5048954518;(*f)[11][61]=0.5160162794;(*f)[11][62]=0.5276110858;(*f)[11][63]=0.5396990348;(*f)[11][64]=0.552299961;(*f)[11][65]=0.5654343762;(*f)[11][66]=0.5791234764;(*f)[11][67]=0.5933891449;(*f)[11][68]=0.6082539551;(*f)[11][69]=0.6237411703;(*f)[11][70]=0.6398747419;(*f)[11][71]=0.6566793043;(*f)[11][72]=0.6741801678;(*f)[11][73]=0.6924033084;(*f)[11][74]=0.7113753546;(*f)[11][75]=0.7311235703;(*f)[11][76]=0.751675835;(*f)[11][77]=0.7730606197;(*f)[11][78]=0.7953069591;(*f)[11][79]=0.8184444192;(*f)[11][80]=0.8425030613;(*f)[11][81]=0.8675134006;(*f)[11][82]=0.8935063606;(*f)[11][83]=0.9205132223;(*f)[11][84]=0.9485655688;(*f)[11][85]=0.9776952237;(*f)[11][86]=1.007934185;(*f)[11][87]=1.039314555;(*f)[11][88]=1.071868458;(*f)[11][89]=1.105627966;(*f)[11][90]=1.140625;(*f)[12][0]=0.3103767621;(*f)[12][1]=0.3104176042;(*f)[12][2]=0.3105410001;(*f)[12][3]=0.3107468598;(*f)[12][4]=0.3110354835;(*f)[12][5]=0.3114072925;(*f)[12][6]=0.3118628297;(*f)[12][7]=0.3124027608;(*f)[12][8]=0.3130278757;(*f)[12][9]=0.3137390901;(*f)[12][10]=0.3145374469;(*f)[12][11]=0.3154241188;(*f)[12][12]=0.3164004104;(*f)[12][13]=0.3174677603;(*f)[12][14]=0.3186277446;(*f)[12][15]=0.3198820796;(*f)[12][16]=0.3212326251;(*f)[12][17]=0.3226813881;(*f)[12][18]=0.3242305266;(*f)[12][19]=0.3258823538;(*f)[12][20]=0.3276393426;(*f)[12][21]=0.3295041298;(*f)[12][22]=0.331479522;(*f)[12][23]=0.3335685;(*f)[12][24]=0.3357742247;(*f)[12][25]=0.3381000433;(*f)[12][26]=0.3405494948;(*f)[12][27]=0.3431263171;(*f)[12][28]=0.3458344535;(*f)[12][29]=0.3486780598;(*f)[12][30]=0.3516615117;(*f)[12][31]=0.3547894127;(*f)[12][32]=0.358066602;(*f)[12][33]=0.3614981628;(*f)[12][34]=0.3650894309;(*f)[12][35]=0.3688460041;(*f)[12][36]=0.372773751;(*f)[12][37]=0.3768788207;(*f)[12][38]=0.3811676527;(*f)[12][39]=0.3856469871;(*f)[12][40]=0.3903238749;(*f)[12][41]=0.3952056887;(*f)[12][42]=0.4003001335;(*f)[12][43]=0.4056152581;(*f)[12][44]=0.411159466;(*f)[12][45]=0.4169415274;(*f)[12][46]=0.4229705902;(*f)[12][47]=0.4292561923;(*f)[12][48]=0.4358082731;(*f)[12][49]=0.4426371855;(*f)[12][50]=0.4497537077;(*f)[12][51]=0.4571690549;(*f)[12][52]=0.464894891;(*f)[12][53]=0.4729433403;(*f)[12][54]=0.4813269984;(*f)[12][55]=0.4900589434;(*f)[12][56]=0.4991527465;(*f)[12][57]=0.5086224821;(*f)[12][58]=0.5184827369;(*f)[12][59]=0.5287486197;(*f)[12][60]=0.5394357686;(*f)[12][61]=0.5505603591;(*f)[12][62]=0.56213911;(*f)[12][63]=0.5741892888;(*f)[12][64]=0.5867287156;(*f)[12][65]=0.5997757662;(*f)[12][66]=0.6133493729;(*f)[12][67]=0.6274690243;(*f)[12][68]=0.6421547634;(*f)[12][69]=0.6574271829;(*f)[12][70]=0.6733074199;(*f)[12][71]=0.6898171468;(*f)[12][72]=0.7069785609;(*f)[12][73]=0.724814371;(*f)[12][74]=0.7433477816;(*f)[12][75]=0.7626024734;(*f)[12][76]=0.7826025821;(*f)[12][77]=0.8033726724;(*f)[12][78]=0.8249377104;(*f)[12][79]=0.8473230307;(*f)[12][80]=0.8705543012;(*f)[12][81]=0.8946574835;(*f)[12][82]=0.9196587894;(*f)[12][83]=0.9455846337;(*f)[12][84]=0.9724615823;(*f)[12][85]=1.000316297;(*f)[12][86]=1.029175473;(*f)[12][87]=1.05906578;(*f)[12][88]=1.090013787;(*f)[12][89]=1.122045892;(*f)[12][90]=1.155188246;(*f)[13][0]=0.3391006286;(*f)[13][1]=0.3391433909;(*f)[13][2]=0.3392725849;(*f)[13][3]=0.3394881058;(*f)[13][4]=0.3397902508;(*f)[13][5]=0.3401794364;(*f)[13][6]=0.3406561993;(*f)[13][7]=0.3412211977;(*f)[13][8]=0.3418752121;(*f)[13][9]=0.3426191468;(*f)[13][10]=0.3434540318;(*f)[13][11]=0.3443810242;(*f)[13][12]=0.3454014107;(*f)[13][13]=0.3465166094;(*f)[13][14]=0.3477281728;(*f)[13][15]=0.3490377905;(*f)[13][16]=0.3504472916;(*f)[13][17]=0.3519586488;(*f)[13][18]=0.3535739812;(*f)[13][19]=0.3552955581;(*f)[13][20]=0.3571258031;(*f)[13][21]=0.3590672983;(*f)[13][22]=0.3611227885;(*f)[13][23]=0.363295186;(*f)[13][24]=0.3655875755;(*f)[13][25]=0.3680032193;(*f)[13][26]=0.3705455624;(*f)[13][27]=0.3732182389;(*f)[13][28]=0.3760250771;(*f)[13][29]=0.3789701061;(*f)[13][30]=0.3820575621;(*f)[13][31]=0.3852918952;(*f)[13][32]=0.3886777762;(*f)[13][33]=0.3922201036;(*f)[13][34]=0.3959240113;(*f)[13][35]=0.3997948761;(*f)[13][36]=0.4038383255;(*f)[13][37]=0.4080602455;(*f)[13][38]=0.4124667894;(*f)[13][39]=0.417064386;(*f)[13][40]=0.4218597479;(*f)[13][41]=0.426859881;(*f)[13][42]=0.4320720925;(*f)[13][43]=0.437504001;(*f)[13][44]=0.4431635447;(*f)[13][45]=0.4490589912;(*f)[13][46]=0.4551989466;(*f)[13][47]=0.4615923646;(*f)[13][48]=0.4682485562;(*f)[13][49]=0.4751771984;(*f)[13][50]=0.4823883434;(*f)[13][51]=0.4898924277;(*f)[13][52]=0.4977002807;(*f)[13][53]=0.5058231331;(*f)[13][54]=0.514272625;(*f)[13][55]=0.5230608138;(*f)[13][56]=0.5322001816;(*f)[13][57]=0.5417036416;(*f)[13][58]=0.5515845445;(*f)[13][59]=0.561856684;(*f)[13][60]=0.5725343016;(*f)[13][61]=0.5836320902;(*f)[13][62]=0.5951651972;(*f)[13][63]=0.6071492263;(*f)[13][64]=0.6196002384;(*f)[13][65]=0.6325347503;(*f)[13][66]=0.6459697335;(*f)[13][67]=0.6599226105;(*f)[13][68]=0.6744112493;(*f)[13][69]=0.6894539572;(*f)[13][70]=0.7050694713;(*f)[13][71]=0.7212769485;(*f)[13][72]=0.7380959523;(*f)[13][73]=0.7555464377;(*f)[13][74]=0.7736487338;(*f)[13][75]=0.7924235239;(*f)[13][76]=0.8118918225;(*f)[13][77]=0.8320749508;(*f)[13][78]=0.8529945073;(*f)[13][79]=0.8746723379;(*f)[13][80]=0.8971305005;(*f)[13][81]=0.9203912284;(*f)[13][82]=0.9444768891;(*f)[13][83]=0.9694099406;(*f)[13][84]=0.9952128837;(*f)[13][85]=1.021908211;(*f)[13][86]=1.049518354;(*f)[13][87]=1.078065623;(*f)[13][88]=1.107572147;(*f)[13][89]=1.138059808;(*f)[13][90]=1.169550173;(*f)[14][0]=0.3673472327;(*f)[14][1]=0.3673917037;(*f)[14][2]=0.367526057;(*f)[14][3]=0.3677501739;(*f)[14][4]=0.3680643466;(*f)[14][5]=0.3684689851;(*f)[14][6]=0.3689646178;(*f)[14][7]=0.369551892;(*f)[14][8]=0.3702315753;(*f)[14][9]=0.371004557;(*f)[14][10]=0.3718718491;(*f)[14][11]=0.3728345884;(*f)[14][12]=0.373894038;(*f)[14][13]=0.3750515897;(*f)[14][14]=0.3763087659;(*f)[14][15]=0.3776672224;(*f)[14][16]=0.3791287508;(*f)[14][17]=0.3806952814;(*f)[14][18]=0.3823688866;(*f)[14][19]=0.3841517836;(*f)[14][20]=0.3860463385;(*f)[14][21]=0.3880550693;(*f)[14][22]=0.3901806505;(*f)[14][23]=0.3924259167;(*f)[14][24]=0.3947938674;(*f)[14][25]=0.3972876708;(*f)[14][26]=0.3999106693;(*f)[14][27]=0.4026663839;(*f)[14][28]=0.4055585197;(*f)[14][29]=0.408590971;(*f)[14][30]=0.4117678267;(*f)[14][31]=0.4150933766;(*f)[14][32]=0.4185721168;(*f)[14][33]=0.4222087558;(*f)[14][34]=0.4260082212;(*f)[14][35]=0.4299756658;(*f)[14][36]=0.4341164743;(*f)[14][37]=0.43843627;(*f)[14][38]=0.4429409217;(*f)[14][39]=0.4476365509;(*f)[14][40]=0.4525295387;(*f)[14][41]=0.4576265329;(*f)[14][42]=0.4629344557;(*f)[14][43]=0.4684605107;(*f)[14][44]=0.4742121902;(*f)[14][45]=0.4801972827;(*f)[14][46]=0.4864238803;(*f)[14][47]=0.4929003856;(*f)[14][48]=0.4996355192;(*f)[14][49]=0.5066383265;(*f)[14][50]=0.5139181848;(*f)[14][51]=0.5214848095;(*f)[14][52]=0.5293482609;(*f)[14][53]=0.5375189499;(*f)[14][54]=0.546007644;(*f)[14][55]=0.5548254721;(*f)[14][56]=0.5639839298;(*f)[14][57]=0.573494883;(*f)[14][58]=0.5833705722;(*f)[14][59]=0.5936236147;(*f)[14][60]=0.604267007;(*f)[14][61]=0.6153141264;(*f)[14][62]=0.6267787307;(*f)[14][63]=0.6386749582;(*f)[14][64]=0.6510173254;(*f)[14][65]=0.6638207244;(*f)[14][66]=0.6771004185;(*f)[14][67]=0.6908720365;(*f)[14][68]=0.7051515658;(*f)[14][69]=0.7199553436;(*f)[14][70]=0.7353000464;(*f)[14][71]=0.7512026782;(*f)[14][72]=0.767680556;(*f)[14][73]=0.7847512942;(*f)[14][74]=0.8024327861;(*f)[14][75]=0.8207431843;(*f)[14][76]=0.8397008771;(*f)[14][77]=0.8593244648;(*f)[14][78]=0.8796327312;(*f)[14][79]=0.9006446147;(*f)[14][80]=0.922379175;(*f)[14][81]=0.9448555587;(*f)[14][82]=0.9680929606;(*f)[14][83]=0.9921105839;(*f)[14][84]=1.016927596;(*f)[14][85]=1.042563083;(*f)[14][86]=1.069035998;(*f)[14][87]=1.096365115;(*f)[14][88]=1.124568966;(*f)[14][89]=1.15366579;(*f)[14][90]=1.183673469;
//}


/*=============================================================
 ccg_illegal_copyright:
 add noise dots to the images
 ==============================================================*/
 void ccg_illegal_copyright(miState *state, miColor *result)
 {
	float r,g,b;
	if(fmod(state->raster_x,50)<2&&fmod(state->raster_y,50)<2)
	{
		r = mi_random();
		g = mi_random();
		b = mi_random();
		r = r>0.65f?r:r+3.5f;
		g = g>0.65f?g:g+3.5f;
		b = b>0.65f?b:b+3.5f;
		if(r>=g)
		{
			if(r>=b) {result->r = r;result->g=0;result->b=0;}
			else {result->r=0;result->g=0;result->b=b;}
		}else if(g>=b) {result->r=0;result->g=g;result->b=0;}
					else {result->r=0;result->g=0;result->b=b;};

		result->a = result->r + result->g + result->b;
	}
 }

/*=============================================================
 ccg_query_light:
 get light shader parameter's value
 ==============================================================*/
 void ccg_query_light(miState *state, char *param, miTag *light, miColor *color)
 {
 	miTag shaderTag, shaderDeclTag, realLight;
	char *values, *params, *curr, *tmp;
	int paramsSize;
	int type, offset;
	
	mi_query( miQ_INST_ITEM,NULL,*light,&realLight);
	mi_query( miQ_LIGHT_SHADER, state, realLight, &shaderTag );
	mi_query( miQ_FUNC_PARAM, state, shaderTag, &values );
	mi_query( miQ_FUNC_PARAM_SIZE, state, shaderTag, &paramsSize );
	mi_query( miQ_FUNC_DECL, state, shaderTag, &shaderDeclTag );
	mi_query( miQ_DECL_PARAM, state, shaderDeclTag, &params );
	
	curr = (char *)mi_mem_allocate(sizeof(char)*(int(strlen(params))+1));
	strcpy(curr,params);
	offset=0;
	tmp = strtok(curr, "\"");
	while(tmp!=NULL)
	{
		if(strcmp(tmp,param)==0) break;
			
		if(strcmp(tmp,"c")==0)
		{
			offset += 16;
			type = 0;
		}else if(strcmp(tmp,"b")==0||strcmp(tmp,"s")==0||strcmp(tmp,"$")==0||strcmp(tmp,"i")==0||strcmp(tmp,"al")==0)
					{
						offset += 4;
						type = 1;
					}else if(strcmp(tmp,"v")==0)
								{
									offset += 12;
									type = 2;
								}
		tmp = strtok(NULL,"\"");
	}
	
	switch(type)
	{
		case 0:		color->r = *((miScalar*)(values+offset-12));
					color->g = *((miScalar*)(values+offset-8));
					color->b = *((miScalar*)(values+offset-4));
					color->a = *((miScalar*)(values+offset));
					break;
		case 1:		color->r = *((miScalar*)(values+offset));
					break;
		case 2:		color->r = *((miScalar*)(values+offset-8));
					color->g = *((miScalar*)(values+offset-4));
					color->b = *((miScalar*)(values+offset));
					break;
	}
	
	//mi_warning("Values: %s\n%f", params, *((miScalar*)(values+offset-12)) );
	mi_mem_release(curr);
}


 /*=============================================================
 ccg_query_value:
 get shader parameter's value
 usage: ccg_query_value(mi_mem_strdup("my_param"), sceneTag, &color);
 ==============================================================*/
miBoolean ccg_query_value(char *param, miTag sceneFunc, miColor *color, miBoolean isInteger)
{
	if(!sceneFunc) return miFALSE;
 	miBoolean is_array;
	miParam_type pType;
	int offset;
	char *values;
	miTag declFunc;

	mi_query( miQ_FUNC_PARAM, NULL, sceneFunc, &values );
	mi_query( miQ_FUNC_DECL, NULL, sceneFunc, &declFunc );
	mi_api_parameter_lookup(&pType, &is_array, &offset, declFunc, miFALSE, param);

	if(!isInteger)
	{
		color->r = *((miScalar*)(values+offset));
		color->g = *((miScalar*)(values+offset+4));
		color->b = *((miScalar*)(values+offset+8));
		color->a = *((miScalar*)(values+offset+12));
	}else color->r = float(*((miInteger*)(values+offset)));

	return miTRUE;
}



void ccg_shadow_choose_volume(miState	*state)
{
	int		n = 0;		/* same-material counter */
	miState	*s, *s_in = 0;	/* for finding enclosing mtl */

	for (n=0, s=state; s; s=s->parent)		/* history? */
		if ((s->type == miRAY_TRANSPARENT	   ||
		     s->type == miRAY_REFRACT		   ||
		     s->type == miPHOTON_TRANSMIT_SPECULAR ||
		     s->type == miPHOTON_TRANSMIT_GLOSSY   ||
		     s->type == miPHOTON_TRANSMIT_DIFFUSE) &&
		     s->parent && s->parent->shader == state->shader) {
			n++;
			if (!s_in)
				s_in = s->parent;
		}

	if (n&1)/* odd: exiting */
		state->refraction_volume = s_in ? s_in->volume : state->camera->volume;
	else if (!state->refraction_volume)
			state->refraction_volume = state->volume;
}


/*=============================================================
 ccg_getTangentUV:
 get tangent vectors from given three point and texture coordinates.
 ==============================================================*/
miBoolean ccg_getTangentUV(
	miState		*state,
	miInteger	idx,
	miVector 	t1,
	miVector 	t2,
	miVector 	t3,
	miVector 	p1,
	miVector 	p2,
	miVector 	p3,
	miVector 	*out_u,
	miVector 	*out_v
	)
{
	miVector	vc,vcA,vcB;
	miScalar	fu21,fv21,fu31,fv31;
	int num = 0;
  
	mi_query( miQ_NUM_BUMPS, state, miNULLTAG, &num);

	if ( num > idx && state->bump_x_list != NULL )
	{
		*out_u = state->bump_x_list[idx];
		*out_v = state->bump_y_list[idx];
		mi_vector_from_object(state, out_u, out_u);
		mi_vector_from_object(state, out_v, out_v);
		mi_vector_normalize(out_u);
		mi_vector_normalize(out_v);
		return miTRUE;
	}

	fu21 = t2.x - t1.x;
	fv21 = t2.y - t1.y;
	fu31 = t3.x - t1.x;
	fv31 = t3.y - t1.y;

	vcA.x = p2.x - p1.x;	vcA.y = fu21;		vcA.z = fv21;
	vcB.x = p3.x - p1.x;	vcB.y = fu31;		vcB.z = fv31;
	mi_vector_prod(&vc, &vcA, &vcB);
	if(vc.x!=0.0)
	{
		out_u->x = -vc.y/vc.x;
		out_v->x = -vc.z/vc.x;
	}

	vcA.x = p2.y - p1.y;	vcA.y = fu21;		vcA.z = fv21;
	vcB.x = p3.y - p1.y;	vcB.y = fu31;		vcB.z = fv31;
	mi_vector_prod(&vc, &vcA, &vcB);
	if(vc.x!=0.0)
	{
		out_u->y = -vc.y/vc.x;
		out_v->y = -vc.z/vc.x;
	}

	vcA.x = p2.z - p1.z;	vcA.y = fu21;		vcA.z = fv21;
	vcB.x = p3.z - p1.z;	vcB.y = fu31;		vcB.z = fv31;
	mi_vector_prod(&vc, &vcA, &vcB);
	if(vc.x!=0.0)
	{
		out_u->z = -vc.y/vc.x;
		out_v->z = -vc.z/vc.x;
	}

	mi_vector_normalize(out_u);
	mi_vector_normalize(out_v);

	return miTRUE;
}



/*=============================================================
 ccg_illegalTex:
 return false if the texture coordinates of triangle are illegal.
 ==============================================================*/
miBoolean ccg_illegalTex(
	miVector t1,
	miVector t2,
	miVector t3
	)
{
	miScalar tex1,tex2,tex3;

	if(t1.x==t1.y&&t1.x==t1.z&&t1.x==0) tex1 = 0;
		else tex1 = 1;
	if(t2.x==t2.y&&t2.x==t2.z&&t2.x==0) tex2 = 0;
		else tex2 = 1;
	if(t3.x==t3.y&&t3.x==t3.z&&t3.x==0) tex3 = 0;
		else tex3 = 1;
			
	if(tex1==0&&tex2==0) return miFALSE;
		else if(tex2==0&&tex3==0)	return miFALSE;
			else if(tex1==0&&tex3==0)	return miFALSE;
				else return miTRUE;
}


/*=============================================================
 ccg_on_plane:
 description: if the given point is on the plane
 input: *normal of the plane, *origin is any point on the plane, and given *point
 output: return 0 means ture, 1 means on the normal side of the plane
 -1 means on the reverse normal side of the plane
 ==============================================================*/
int ccg_on_plane(miVector *normal, miVector *origin, miVector *point)
{
	/* the plane formula is given by
	   ax + by + cz = 0  while
	   n = (a,b,c) */
	float r = normal->x*(origin->x-point->x) + normal->y*(origin->y-point->y) + normal->z*(origin->z-point->z);
	return (r<0?1:(r>0?-1:0));
}


/*=============================================================
 ccg_bent_space_conversion:
 description: convert bent normal space
 ==============================================================*/
void ccg_bent_space_conversion(miState *state, int bent_space, miVector *bent_i, miVector *bent_vector)
{
	switch(bent_space) {
		case 0: /* World */
			mi_normal_from_world(state, bent_i, bent_vector);
			break;
		case 1: /* Camera */
			mi_normal_from_camera(state, bent_i, bent_vector);
			break;
		case 2: /* Object */
			mi_normal_from_object(state, bent_i, bent_vector);
			break;
		case 3: /* No change */
			*bent_i = *bent_vector;
			break;
	}
}



/*=============================================================
 ccg_colormap2Vector:
 description: convert colormap to vector
 ==============================================================*/
void ccg_colormap2Vector(miColor *colormap, miVector *vector)
{
	vector->x = (colormap->r * 2.0f) - 1.0f;
	vector->y = (colormap->g * 2.0f) - 1.0f;
	vector->z = (colormap->b * 2.0f) - 1.0f;
	mi_vector_normalize(vector);
}


/*=============================================================
 ccg_mi_call_shader:
 description: with state swap before call shader
 ==============================================================*/
miBoolean ccg_mi_call_shader(miColor *r, miState *s, miTag shadertag)
{
	if(shadertag == miNULLTAG) return miFALSE;
	miState *orig = s;
	miState copy = *orig;
	s = &copy;
	miBoolean call;
	call = mi_call_shader(r, miSHADER_MATERIAL, s, shadertag);
	s = orig;
	if(!call) return miFALSE;
	return miTRUE;
}

/*=============================================================
 ccg_mi_eval:
 description: with state swap before mi_eval
 ==============================================================*/
miColor * ccg_mi_eval_color(miState *state, void *p)
{
	miState *orig = state;
	miState copy = *orig;
	state = &copy;
	miColor *r = mi_eval_color(p);
	state = orig;
	return r;
}

miScalar * ccg_mi_eval_scalar(miState *state, void *p)
{
	miState *orig = state;
	miState copy = *orig;
	state = &copy;
	miScalar *r = mi_eval_scalar(p);
	state = orig;
	return r;
}

miBoolean * ccg_mi_eval_boolean(miState *state, void *p)
{
	miState *orig = state;
	miState copy = *orig;
	state = &copy;
	miBoolean *r = mi_eval_boolean(p);
	state = orig;
	return r;
}

miInteger * ccg_mi_eval_integer(miState *state, void *p)
{
	miState *orig = state;
	miState copy = *orig;
	state = &copy;
	miInteger *r = mi_eval_integer(p);
	state = orig;
	return r;
}

miVector * ccg_mi_eval_vector(miState *state, void *p)
{
	miState *orig = state;
	miState copy = *orig;
	state = &copy;
	miVector *r = mi_eval_vector(p);
	state = orig;
	return r;
}

miTag * ccg_mi_eval_tag(miState *state, void *p)
{
	miState *orig = state;
	miState copy = *orig;
	state = &copy;
	miTag *r = mi_eval_tag(p);
	state = orig;
	return r;
}